version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: speaking_practice
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d speaking_practice"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  livekit:
    image: livekit/livekit-server:latest
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "7880:7880"
      - "7881:7881"
      - "7882:7882/udp"
    volumes:
      - ./livekit.yaml:/livekit.yaml:ro
    command: --config /livekit.yaml
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:7880/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    image: python:3.11-slim
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    environment:
      # Paksa backend pakai Postgres & services internal docker
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@postgres:5432/speaking_practice
      REDIS_URI: redis://redis:6379/0
      LIVEKIT_WS_URL: ws://livekit:7880
      API_PREFIX: /api
      PORT: 8000
    command: /bin/sh -c "
      pip install --no-cache-dir -r requirements.txt &&
      python -c 'import sys; import pkgutil; import importlib; \
        import subprocess; \
        subprocess.call([sys.executable, \"-m\", \"pip\", \"install\", \"psycopg2-binary\"])' && \
      uvicorn app.main:app --host 0.0.0.0 --port 8000
    "
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      livekit:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Opsional: jalankan Next.js bila folder frontend tersedia
  frontend:
    image: node:20-alpine
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./frontend:/app
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8000/api
    command: sh -c "npm install && npm run dev"
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
